// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddressAddedToWhitelist extends ethereum.Event {
  get params(): AddressAddedToWhitelist__Params {
    return new AddressAddedToWhitelist__Params(this);
  }
}

export class AddressAddedToWhitelist__Params {
  _event: AddressAddedToWhitelist;

  constructor(event: AddressAddedToWhitelist) {
    this._event = event;
  }

  get whitelistedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  maxWhitelistedAddresses(): i32 {
    let result = super.call(
      "maxWhitelistedAddresses",
      "maxWhitelistedAddresses():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_maxWhitelistedAddresses(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxWhitelistedAddresses",
      "maxWhitelistedAddresses():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  numAddressesWhitelisted(): i32 {
    let result = super.call(
      "numAddressesWhitelisted",
      "numAddressesWhitelisted():(uint8)",
      [],
    );

    return result[0].toI32();
  }

  try_numAddressesWhitelisted(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "numAddressesWhitelisted",
      "numAddressesWhitelisted():(uint8)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  whitelistedAddresses(param0: Address): boolean {
    let result = super.call(
      "whitelistedAddresses",
      "whitelistedAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_whitelistedAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistedAddresses",
      "whitelistedAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maxWhitelistedAddresses(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAddressToWhitelistCall extends ethereum.Call {
  get inputs(): AddAddressToWhitelistCall__Inputs {
    return new AddAddressToWhitelistCall__Inputs(this);
  }

  get outputs(): AddAddressToWhitelistCall__Outputs {
    return new AddAddressToWhitelistCall__Outputs(this);
  }
}

export class AddAddressToWhitelistCall__Inputs {
  _call: AddAddressToWhitelistCall;

  constructor(call: AddAddressToWhitelistCall) {
    this._call = call;
  }
}

export class AddAddressToWhitelistCall__Outputs {
  _call: AddAddressToWhitelistCall;

  constructor(call: AddAddressToWhitelistCall) {
    this._call = call;
  }
}
